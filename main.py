import os
import re
import json
import time
import html
import random
import hashlib
import logging
import threading
from io import BytesIO
from time import mktime
from datetime import datetime, timedelta
from urllib.parse import urlsplit, urlunsplit, parse_qsl, urlencode

import pytz
import httpx
import feedparser
import telegram
from telegram.error import BadRequest
from openai import OpenAI
from apscheduler.schedulers.background import BackgroundScheduler
from flask import Flask, request

# ‚îÄ‚îÄ‚îÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
app = Flask(__name__)

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
CHANNEL_ID = os.getenv("CHANNEL_ID")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
if not TELEGRAM_TOKEN:
    raise ValueError("TELEGRAM_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
if not CHANNEL_ID:
    raise ValueError("CHANNEL_ID –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
if not OPENAI_API_KEY:
    raise ValueError("OPENAI_API_KEY –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

# ‚ûï –ù–æ–≤–æ–µ: –±–∞–∑–æ–≤—ã–π –∫–∞—Ç–∞–ª–æ–≥ –¥–ª—è –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ (Railway Volume)
DATA_DIR = os.getenv("DATA_DIR", "/data")
os.makedirs(DATA_DIR, exist_ok=True)

# –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –ø–æ–¥–ø–∏—Å–∏ –∫ —Ñ–æ—Ç–æ –≤ Telegram
CAPTION_LIMIT = int(os.getenv("TG_CAPTION_LIMIT", "1024"))

# –∞–Ω—Ç–∏-–ø–æ–≤—Ç–æ—Ä—ã –Ω–æ–≤–æ—Å—Ç–µ–π ‚Äî –º–æ–∂–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è—Ç—å —á–µ—Ä–µ–∑ ENV
SEEN_NEWS_FILE = os.getenv("SEEN_NEWS_FILE", os.path.join(DATA_DIR, "seen_news.json"))
SEEN_MAX_DAYS = int(os.getenv("SEEN_MAX_DAYS", "7"))
SEEN_MAX_ITEMS = int(os.getenv("SEEN_MAX_ITEMS", "1000"))

# ‚ûï –ù–æ–≤–æ–µ: –∫—É–¥–∞ –∫–ª–∞—Å—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–æ—Ç–∞—Ü–∏–∏ (–Ω–∞ Volume)
ROTATION_STATE_FILE = os.getenv("ROTATION_STATE_FILE", os.path.join(DATA_DIR, "rotation_state.json"))

client = OpenAI(api_key=OPENAI_API_KEY)
bot = telegram.Bot(token=TELEGRAM_TOKEN)
scheduler = BackgroundScheduler(timezone=pytz.timezone("Europe/Moscow"))

# –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –Ω–∞ —Å–ª—É—á–∞–π –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤ (scheduler + /test)
ROT_LOCK = threading.Lock()

NEGATIVE_SUFFIX = (
    "–°—Ç—Ä–æ–≥–æ –ë–ï–ó —Ç–µ–∫—Å—Ç–∞, –±—É–∫–≤, —Ü–∏—Ñ—Ä –∏ –ª–æ–≥–æ—Ç–∏–ø–æ–≤. "
    "–ó–∞–ø—Ä–µ—Ç: –ø–ª–æ—Å–∫–∞—è –≤–µ–∫—Ç–æ—Ä–Ω–∞—è –≥—Ä–∞—Ñ–∏–∫–∞, –∏–∫–æ–Ω–∫–∏, –∫–æ–º–∏–∫—Å, 2D-–∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è, –∫–ª–∏–ø–∞—Ä—Ç."
)

# ‚îÄ‚îÄ‚îÄ –ú–∞—Ä—à—Ä—É—Ç—ã –∑–¥–æ—Ä–æ–≤—å—è / —Ä—É—á–Ω–æ–π —Ç—Ä–∏–≥–≥–µ—Ä ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@app.route("/")
def home():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç ‚úÖ", 200

@app.route("/ping")
def ping():
    return "OK", 200

@app.route("/test")
def manual_test():
    # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞ —Ç–æ–∫–µ–Ω–æ–º: –∑–∞–¥–∞–π—Ç–µ TEST_TOKEN –≤ ENV
    token = request.args.get("token")
    expected = os.getenv("TEST_TOKEN")
    if expected and token != expected:
        return "Forbidden", 403

    kind = request.args.get("type", "news")  # "news" | "rubric" | "history"
    try:
        if kind == "rubric":
            scheduled_rubric_post()
            return "‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–ª–µ–¥—É—é—â–∏–π —Ä—É–±—Ä–∏—á–Ω—ã–π –ø–æ—Å—Ç –ø–æ —Ä–æ—Ç–∞—Ü–∏–∏", 200
        elif kind == "history":
            scheduled_history_post()
            return "‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π –ø–æ—Å—Ç ¬´–í —ç—Ç–æ—Ç –¥–µ–Ω—å –≤ —Ñ–∏–Ω–∞–Ω—Å–∞—Ö¬ª", 200
        else:
            scheduled_news_post()
            return "‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–ª–µ–¥—É—é—â–∏–π –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –ø–æ—Å—Ç –ø–æ —Ä–æ—Ç–∞—Ü–∏–∏", 200
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞: {e}", 500

# ‚îÄ‚îÄ‚îÄ –£—Ç–∏–ª–∏—Ç—ã ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def clean_html(raw_html: str) -> str:
    return re.sub(re.compile('<.*?>'), '', raw_html or "")

def _canonical_link(link: str) -> str:
    if not link:
        return ""
    try:
        u = urlsplit(link)
        q = [(k, v) for k, v in parse_qsl(u.query, keep_blank_values=True)
             if not k.lower().startswith("utm_")]
        return urlunsplit((u.scheme, u.netloc.lower(), u.path, urlencode(sorted(q)), ""))
    except Exception:
        return link

def _story_id(title: str, link: str) -> str:
    canon = _canonical_link(link)
    base = (canon or title or "").lower()
    base = re.sub(r"\s+", " ", base)
    base = re.sub(r"[^\w\s/.\-]+", "", base)
    return hashlib.sha1(base.encode("utf-8")).hexdigest()[:16]

def _load_seen() -> dict:
    if os.path.exists(SEEN_NEWS_FILE):
        try:
            with open(SEEN_NEWS_FILE, "r", encoding="utf-8") as f:
                return json.load(f)
        except Exception:
            pass
    return {}

def _save_seen(seen: dict):
    try:
        os.makedirs(os.path.dirname(SEEN_NEWS_FILE) or DATA_DIR, exist_ok=True)  # ‚ûï ensure dir
        with open(SEEN_NEWS_FILE, "w", encoding="utf-8") as f:
            json.dump(seen, f, ensure_ascii=False)
    except Exception:
        pass

def _prune_seen(seen: dict):
    now = time.time()
    cutoff = now - SEEN_MAX_DAYS * 86400
    # –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    for k in list(seen.keys()):
        if seen[k] < cutoff:
            del seen[k]
    # –ø–æ —Ä–∞–∑–º–µ—Ä—É
    if len(seen) > SEEN_MAX_ITEMS:
        keep = dict(sorted(seen.items(), key=lambda kv: kv[1], reverse=True)[:SEEN_MAX_ITEMS])
        seen.clear()
        seen.update(keep)

def _mark_seen(story_id: str):
    seen = _load_seen()
    seen[story_id] = time.time()
    _prune_seen(seen)
    _save_seen(seen)

def _is_seen(story_id: str) -> bool:
    return story_id in _load_seen()

# ‚ûï –ù–æ–≤–æ–µ: –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–∞—è —Ä–æ—Ç–∞—Ü–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤
def _load_rotation_state() -> dict:
    try:
        with open(ROTATION_STATE_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
            return data if isinstance(data, dict) else {}
    except Exception:
        return {}

def _save_rotation_state(state: dict):
    try:
        os.makedirs(os.path.dirname(ROTATION_STATE_FILE) or DATA_DIR, exist_ok=True)  # ‚ûï ensure dir
        tmp = ROTATION_STATE_FILE + ".tmp"
        with open(tmp, "w", encoding="utf-8") as f:
            json.dump(state, f, ensure_ascii=False)
        os.replace(tmp, ROTATION_STATE_FILE)  # –∞—Ç–æ–º–∞—Ä–Ω–∞—è –∑–∞–ø–∏—Å—å
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–æ—Ç–∞—Ü–∏–∏: {e}")

def _next_index(kind: str, total: int) -> int:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¢–ï–ö–£–©–ò–ô –∏–Ω–¥–µ–∫—Å –¥–ª—è kind ('rubric'|'news') –∏ —Å—Ä–∞–∑—É
    –ø—Ä–æ–¥–≤–∏–≥–∞–µ—Ç –µ–≥–æ –Ω–∞ +1 –ø–æ –∫–æ–ª—å—Ü—É. –ü–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ –∏ –ø–µ—Ä–µ–∂–∏–≤–∞–µ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∏.
    """
    with ROT_LOCK:
        state = _load_rotation_state()
        key = f"{kind}_index"
        idx = int(state.get(key, 0))
        state[key] = (idx + 1) % total
        _save_rotation_state(state)
        # –¥–µ—Ä–∂–∏–º –≥–ª–æ–±–∞–ª–∫–∏ –≤ —Å–∏–Ω—Ö—Ä–æ–Ω–µ (–µ—Å–ª–∏ –≥–¥–µ-—Ç–æ —á–∏—Ç–∞—é—Ç—Å—è)
        if kind == "rubric":
            globals()["rubric_index"] = state[key]
        elif kind == "news":
            globals()["news_index"] = state[key]
        return idx

def _polish_and_to_html(text: str) -> str:
    """
    1) —É–±–∏—Ä–∞–µ—Ç '‚Äî –ü–æ–¥—Å—á—ë—Ç: ...'
    2) –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∏ (—ç–º–æ–¥–∑–∏ + –∂–∏—Ä–Ω—ã–π)
    3) –≤—Å—Ç–∞–≤–ª—è–µ—Ç –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –ø–µ—Ä–µ–¥ –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
    4) –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç **...** ‚Üí <b>...</b> –∏ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç HTML
    """
    t = (text or "").strip()
    # —É–±—Ä–∞—Ç—å —Å—Ç—Ä–æ–∫—É '‚Äî –ü–æ–¥—Å—á—ë—Ç: ...'
    t = re.sub(r'(?im)^\s*[‚Äî\-‚Äì]\s*–ü–æ–¥—Å—á[–µ—ë]—Ç:.*$', '', t)

    # –∑–∞–≥–æ–ª–æ–≤–∫–∏
    t = re.sub(r'(?im)^\s*–ê–Ω–∞–ª–∏—Ç–∏–∫–∞\s*:?\s*$', '**üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞:**', t, flags=re.MULTILINE)
    t = re.sub(r'(?im)^\s*–ü—Ä–æ–≥–Ω–æ–∑\s*:?\s*$',   '**üìà –ü—Ä–æ–≥–Ω–æ–∑:**',   t, flags=re.MULTILINE)
    t = re.sub(r'(?im)^\s*–í—ã–≤–æ–¥\s*:?\s*$',     '**üß≠ –í—ã–≤–æ–¥:**',     t, flags=re.MULTILINE)
    t = re.sub(r'(?im)^\s*–®–∞–≥–∏\s*:?\s*$',                 '**üß© –®–∞–≥–∏:**',                 t, flags=re.MULTILINE)
    t = re.sub(r'(?im)^\s*–ß—Ç–æ –¥–µ–ª–∞—Ç—å –∏–Ω–≤–µ—Å—Ç–æ—Ä—É\s*:?\s*$', '**üß≠ –ß—Ç–æ –¥–µ–ª–∞—Ç—å –∏–Ω–≤–µ—Å—Ç–æ—Ä—É:**', t, flags=re.MULTILINE)

    # –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
    t = re.sub(r'(?m)([^\n])\n(\*\*[^\n]*\*\*)', r'\1\n\n\2', t)
    # –∏ –ø–µ—Ä–µ–Ω–æ—Å –ø–æ—Å–ª–µ
    t = re.sub(r'(?m)(\*\*[^\n]*\*\*)\n(?!\n)', r'\1\n', t)

    # –≤—Ä–µ–º–µ–Ω–Ω–æ —Å–∫—Ä—ã–≤–∞–µ–º **...**
    placeholders = []
    def _keep_bold(m):
        placeholders.append(m.group(1))
        return f"@@B{len(placeholders)-1}@@"

    t = re.sub(r"\*\*(.+?)\*\*", _keep_bold, t, flags=re.DOTALL)

    # —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML
    t = html.escape(t)

    # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º <b>...</b>
    for i, content in enumerate(placeholders):
        t = t.replace(f"@@B{i}@@", f"<b>{html.escape(content)}</b>")

    return t.strip()

def _regenerate_to_fit(original_text: str, target_limits=(940, 900, 860)) -> str:
    """
    –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ—Å—Ç –∫–æ—Ä–æ—á–µ, —á—Ç–æ–±—ã —É–º–µ—Å—Ç–∏—Ç—å—Å—è –≤ –ª–∏–º–∏—Ç –ø–æ–¥–ø–∏—Å–∏ Telegram –ø–æ—Å–ª–µ HTML.
    –ù–µ –¥–æ–±–∞–≤–ª—è–µ—Ç ¬´‚Ä¶¬ª, –Ω–µ –æ–±—Ä–µ–∑–∞–µ—Ç ‚Äî –ø—Ä–æ—Å–∏—Ç LLM –Ω–∞–ø–∏—Å–∞—Ç—å –∫–æ–º–ø–∞–∫—Ç–Ω–µ–µ.
    """
    base = (original_text or "").strip()
    for tgt in target_limits:
        try:
            prompt = (
                "–ü–µ—Ä–µ–ø–∏—à–∏ —ç—Ç–æ—Ç –ø–æ—Å—Ç –ö–û–†–û–ß–ï, —Å–æ—Ö—Ä–∞–Ω–∏–≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏ —Å–º—ã—Å–ª: "
                "–∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å —ç–º–æ–¥–∑–∏, –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫-–∑–∞—Ü–µ–ø, –∫—Ä–∞—Ç–∫–æ–µ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ, "
                "–∂–∏—Ä–Ω—ã–µ –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∏, –∞–Ω–∞–ª–∏—Ç–∏–∫–∞/–ø—Ä–æ–≥–Ω–æ–∑, –≤—ã–≤–æ–¥, –≤–æ–ø—Ä–æ—Å –≤ –∫–æ–Ω—Ü–µ. "
                "–ë–µ–∑ —Ö–µ—à—Ç–µ–≥–æ–≤. –ë–µ–∑ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –º–Ω–æ–≥–æ—Ç–æ—á–∏—è –≤ –∫–æ–Ω—Ü–µ. "
                f"–°–¢–†–û–ì–û: –æ–±—â–∏–π –æ–±—ä—ë–º –Ω–µ –±–æ–ª–µ–µ {tgt} —Å–∏–º–≤–æ–ª–æ–≤ –≤ —á–∏—Å—Ç–æ–º —Ç–µ–∫—Å—Ç–µ.\n\n"
                f"–¢–µ–∫—Å—Ç:\n{base}"
            )
            new_text = generate_post_text(prompt)
            if not new_text:
                continue
            html_ver = _polish_and_to_html(new_text)
            if len(html_ver) <= CAPTION_LIMIT:
                return new_text.strip()
        except Exception:
            continue
    return base  # –µ—Å–ª–∏ –Ω–µ —É–ª–æ–∂–∏–ª–∏—Å—å –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫ ‚Äî –≤–µ—Ä–Ω—ë–º –∏—Å—Ö–æ–¥–Ω–∏–∫

# ‚îÄ‚îÄ‚îÄ –ö–æ–Ω—Ç–µ–Ω—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –∫–∞–∫ –±—ã–ª–∏) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
rubrics = [
    "–§–∏–Ω—Å–æ–≤–µ—Ç –¥–Ω—è", "–§–∏–Ω–ª–∏–∫–±–µ–∑", "–õ–∏—á–Ω—ã–π —Ñ–∏–Ω–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç", "–î–µ–Ω—å–≥–∏ –≤ —Ü–∏—Ñ—Ä–∞—Ö",
    "–ö–µ–π—Å / –†–∞–∑–±–æ—Ä", "–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è –¥–µ–Ω–µ–≥", "–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –æ—à–∏–±–∫–∞", "–ü—Ä–æ–¥—É–∫—Ç –Ω–µ–¥–µ–ª–∏",
    "–ò–Ω–≤–µ—Å—Ç-–≥–æ—Ä–∏–∑–æ–Ω—Ç", "–ú–∏—Ñ –Ω–µ–¥–µ–ª–∏", "–ü—É—Ç—å –∫ 1 –º–ª–Ω", "–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –ø—Ä–∏–≤—ã—á–∫–∞",
    "–í–æ–ø—Ä–æ—Å ‚Äî –æ—Ç–≤–µ—Ç", "Excel / –¢–∞–±–ª–∏—Ü–∞", "–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Ü–∏—Ç–∞—Ç–∞", "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –Ω–µ–¥–µ–ª–∏"
]

news_themes = [
    "–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –†–æ—Å—Å–∏–∏",
    "–ù–æ–≤–æ—Å—Ç–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç",
    "–ù–æ–≤–æ—Å—Ç–∏ —Ñ–æ–Ω–¥–æ–≤—ã—Ö —Ä—ã–Ω–∫–æ–≤ (–†–æ—Å—Å–∏—è –∏ –°–®–ê)",
    "–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –°–®–ê –∏ –º–∏—Ä–∞",
]

rss_sources = {
    "–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –†–æ—Å—Å–∏–∏": [
        "https://rssexport.rbc.ru/rbcnews/news/20/full.rss",
        "https://tass.ru/rss/v2.xml?rubric=ekonomika",
        "https://www.interfax.ru/rss.asp",
        "https://www.forbes.ru/newrss.xml",
        "https://www.moex.com/export/news.aspx?cat=news&fmt=rss",
        "https://www.vedomosti.ru/rss/news",
        "https://www.–∫–æ–º–º–µ—Ä—Å–∞–Ω—Ç.ru/RSS/news.xml".replace("–∫–æ–º–º–µ—Ä—Å–∞–Ω—Ç", "kommersant"),
    ],
    "–ù–æ–≤–æ—Å—Ç–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç": [
        "https://forklog.com/feed/",
        "https://bitnovosti.com/feed/",
        "https://www.coindesk.com/arc/outboundfeeds/rss/",
        "https://www.theblock.co/rss",
        "https://bits.media/rss/",
        "https://decrypt.co/feed",
    ],
    "–ù–æ–≤–æ—Å—Ç–∏ —Ñ–æ–Ω–¥–æ–≤—ã—Ö —Ä—ã–Ω–∫–æ–≤ (–†–æ—Å—Å–∏—è –∏ –°–®–ê)": [
        "https://rssexport.rbc.ru/rbcnews/news/21/full.rss",
        "https://www.finam.ru/rss/news.rss",
    ],
    "–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –°–®–ê –∏ –º–∏—Ä–∞": [
        "https://www.ft.com/markets?format=rss",
        "https://feeds.marketwatch.com/marketwatch/topstories/",
        "https://feeds.reuters.com/reuters/businessNews",
        "https://apnews.com/apf-business?output=rss",
    ],
}

SYSTEM_PROMPT = (
    "–¢—ã ‚Äî —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä Telegram-–∫–∞–Ω–∞–ª–∞. –ü–∏—à–∏ –∂–∏–≤–æ, —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–æ –∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ. "
    "–ü–æ—Å—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–ª–∂–µ–Ω –≤–∫–ª—é—á–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –±–ª–æ–∫–∏: "
    "1) –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å —ç–º–æ–¥–∑–∏, "
    "2) –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫-–∑–∞—Ü–µ–ø —Å —ç–º–æ–¥–∑–∏ ‚Äî –∏–Ω—Ç—Ä–∏–≥—É—é—â–∏–π –∫—Ä—é—á–æ–∫ (–≤–æ–ø—Ä–æ—Å –∏–ª–∏ —Ñ—Ä–∞–∑–∞, –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤), "
    "3) –∫—Ä–∞—Ç–∫–æ–µ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ, "
    "4) –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å —ç–º–æ–¥–∑–∏ –∏ –∂–∏—Ä–Ω—ã–º —à—Ä–∏—Ñ—Ç–æ–º, "
    "5) –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –ø—Ä–æ–≥–Ω–æ–∑, "
    "6) –∏—Ç–æ–≥–æ–≤—ã–π –≤—ã–≤–æ–¥. "
    "–í –∫–æ–Ω—Ü–µ ‚Äî –Ω–µ–Ω–∞–≤—è–∑—á–∏–≤—ã–π, –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å –∫ –ø–æ–¥–ø–∏—Å—á–∏–∫—É. "
    "–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Ä–µ—à—ë—Ç–∫–∏ #. –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ –∂–∏—Ä–Ω—ã–π —à—Ä–∏—Ñ—Ç –¥–ª—è –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–æ–≤. "
    "–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –≤ —Ç–µ–ª–µ —Ç–µ–∫—Å—Ç–∞, —Ç–æ–ª—å–∫–æ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö. "
    "–°–¢–†–û–ì–û: –û—Ç–≤–µ—Ç –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 990 —Å–∏–º–≤–æ–ª–æ–≤. –ü–µ—Ä–µ–¥ —Ñ–∏–Ω–∞–ª—å–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º –ø–æ–¥—Å—á–∏—Ç–∞–π –¥–ª–∏–Ω—É –∏ —É–±–µ–¥–∏—Å—å, —á—Ç–æ –æ–Ω–∞ <=990. –ï—Å–ª–∏ –±–æ–ª—å—à–µ ‚Äî —Å–æ–∫—Ä–∞—Ç–∏. "
)

SYSTEM_PROMPT += (
    "\n\n–ö–û–ù–ö–†–ï–¢–ò–ö–ê –ò –ü–†–ê–ö–¢–ò–ö–ê:\n"
    "‚Äî –ö–æ–≥–¥–∞ –≤–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–∏–≤–æ–¥–∏ —á–∏—Å–ª–∞/–¥–∏–∞–ø–∞–∑–æ–Ω—ã (%, ‚ÇΩ, —Å—Ä–æ–∫–∏).\n"
    "‚Äî –î–æ–±–∞–≤–ª—è–π 1 –∫–æ—Ä–æ—Ç–∫–∏–π –ø—Ä–∏–º–µ—Ä-—Ä–∞—Å—á—ë—Ç (–∫–∞–∂–¥—ã–π —Ä–∞–∑ –Ω–æ–≤—ã–π, –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π).\n"
    "‚Äî –ï—Å–ª–∏ —É–º–µ—Å—Ç–Ω–æ, –≤—Å—Ç–∞–≤–ª—è–π –±–ª–æ–∫ **üß© –®–∞–≥–∏:** (3‚Äì5 –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤ –ø–æ 1 —Å—Ç—Ä–æ–∫–µ).\n"
    "‚Äî –î–ª—è –Ω–æ–≤–æ—Å—Ç–µ–π ‚Äî –±–ª–æ–∫ **üß≠ –ß—Ç–æ –¥–µ–ª–∞—Ç—å –∏–Ω–≤–µ—Å—Ç–æ—Ä—É:** 2‚Äì3 –ª–∞–∫–æ–Ω–∏—á–Ω—ã—Ö –ø—É–Ω–∫—Ç–∞.\n"
    "‚Äî –ù–µ –≤—ã–¥—É–º—ã–≤–∞–π —Ñ–∞–∫—Ç–æ–≤; –µ—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π –æ—Ä–∏–µ–Ω—Ç–∏—Ä—ã –∏ –¥–∏–∞–ø–∞–∑–æ–Ω—ã.\n"
    "\n\n–Ø–ó–´–ö –ò –ü–ï–†–ï–í–û–î:\n"
    "–ü–∏—à–∏ –≤–µ—Å—å –ø–æ—Å—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º. –ï—Å–ª–∏ —Ñ—Ä–∞–≥–º–µ–Ω—Ç –Ω–æ–≤–æ—Å—Ç–∏ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º ‚Äî –ø–µ—Ä–µ–≤–µ–¥–∏ –∫–ª—é—á–µ–≤—ã–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏ –Ω–∞ —Ä—É—Å—Å–∫–∏–π –±–µ–∑ –∏—Å–∫–∞–∂–µ–Ω–∏–π. "
    "–ò–º–µ–Ω–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏ —Ç–∏–∫–µ—Ä—ã (Fed, ECB, S&P 500, Apple, BTC) –æ—Å—Ç–∞–≤–ª—è–π –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ. "
    "–ß–∏—Å–ª–∞ –∏ –ø—Ä–æ—Ü–µ–Ω—Ç—ã –Ω–µ –≤—ã–¥—É–º—ã–≤–∞–π, –±–µ—Ä–∏ —Ç–æ–ª—å–∫–æ –∏–∑ –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞; –≤–∞–ª—é—Ç—ã ‚Äî $, ‚Ç¨, ‚ÇΩ; –¥–∞—Ç—ã ‚Äî –≤ —Ä—É—Å—Å–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ."
    "\n\n–î–ò–°–¶–ò–ü–õ–ò–ù–ê –§–ê–ö–¢–û–í: –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ —Å–≤–µ–¥–µ–Ω–∏—è, —è–≤–Ω–æ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –≤–æ –≤—Ö–æ–¥–Ω–æ–º –±–ª–æ–∫–µ "
    "¬´–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏¬ª. –ù–µ –¥–æ–±–∞–≤–ª—è–π –≥–µ–æ–ø–æ–ª–∏—Ç–∏–∫—É/–≥–æ—Ä–æ–¥–∞/—Ü–∏—Ñ—Ä—ã/–∫–æ—Ç–∏—Ä–æ–≤–∫–∏, –µ—Å–ª–∏ –∏—Ö —Ç–∞–º –Ω–µ—Ç. "
    "–ü—Ä–æ–≥–Ω–æ–∑ —Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –±–µ–∑ –Ω–æ–≤—ã—Ö —á–∏—Å–ª–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π."
)

CONCRETE_HINT_RUBRIC = (
    "–î–æ–±–∞–≤—å –∫–æ–Ω–∫—Ä–µ—Ç–∏–∫–∏: 1 –ø—Ä–∏–º–µ—Ä-—Ä–∞—Å—á—ë—Ç –≤ ‚ÇΩ –∏ –±–ª–æ–∫ **üß© –®–∞–≥–∏:** (3‚Äì5 –ø—É–Ω–∫—Ç–æ–≤ –ø–æ 1 —Å—Ç—Ä–æ–∫–µ)."
)
CONCRETE_HINT_NEWS = (
    "–ü–∏—à–∏ –¢–û–õ–¨–ö–û –Ω–∞ –æ—Å–Ω–æ–≤–µ –±–ª–æ–∫–∞ ¬´–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏¬ª –Ω–∏–∂–µ. "
    "–ó–∞–ø—Ä–µ—â–µ–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å —Ñ–∞–∫—Ç—ã, –≥–æ—Ä–æ–¥–∞/—Å—Ç—Ä–∞–Ω—ã, –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç, —É—Ä–æ–≤–Ω–∏ –∏–Ω–¥–µ–∫—Å–æ–≤ –∏ —Ü–µ–Ω—ã –∞–∫—Ç–∏–≤–æ–≤, "
    "–µ—Å–ª–∏ –∏—Ö –ù–ï–¢ –≤ ¬´–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏¬ª. "
    "–ï—Å–ª–∏ –∏—Å—Ö–æ–¥–Ω–∏–∫ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º ‚Äî –ø–µ—Ä–µ–≤–µ–¥–∏ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏. –ò–º–µ–Ω–∞/—Ç–∏–∫–µ—Ä—ã –Ω–µ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å. "
    "–í –∫–æ–Ω—Ü–µ –¥–æ–±–∞–≤—å –±–ª–æ–∫ **üß≠ –ß—Ç–æ –¥–µ–ª–∞—Ç—å –∏–Ω–≤–µ—Å—Ç–æ—Ä—É:** 2‚Äì3 –ø—É–Ω–∫—Ç–∞, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞ —ç—Ç–∏—Ö —Ñ–∞–∫—Ç–∞—Ö (–±–µ–∑ –Ω–æ–≤—ã—Ö —Ü–∏—Ñ—Ä)."
)

# ‚ûï –ù–æ–≤–æ–µ: –ø–æ–¥—Å–∫–∞–∑–∫–∞ –¥–ª—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–π —Ä—É–±—Ä–∏–∫–∏
HISTORY_HINT = (
    "–≠—Ç–æ —Ä—É–±—Ä–∏–∫–∞ ¬´–í —ç—Ç–æ—Ç –¥–µ–Ω—å –≤ —Ñ–∏–Ω–∞–Ω—Å–∞—Ö¬ª. –ù–∞—á–Ω–∏ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞ ¬´üìÖ –í —ç—Ç–æ—Ç –¥–µ–Ω—å –≤ —Ñ–∏–Ω–∞–Ω—Å–∞—Ö¬ª. "
    "–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–∑–æ–≤–∏ –≥–æ–¥ –≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ —Ñ–∞–∫—Ç–æ–≤. –ö–æ—Ä–æ—Ç–∫–æ –æ–ø–∏—à–∏ —Å–æ–±—ã—Ç–∏–µ –∏ –ø–æ—á–µ–º—É –æ–Ω–æ –≤–∞–∂–Ω–æ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∫–∏/—Ä—ã–Ω–∫–æ–≤. "
    "–î–æ–±–∞–≤—å –±–ª–æ–∫ **üìä –ö–æ–Ω—Ç–µ–∫—Å—Ç:** 1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è. "
    "–î–æ–±–∞–≤—å –±–ª–æ–∫ **üß≠ –£—Ä–æ–∫ –∏–Ω–≤–µ—Å—Ç–æ—Ä—É:** 2‚Äì3 –ø—É–Ω–∫—Ç–∞. –ù–∏–∫–∞–∫–∏—Ö –≤—ã–¥—É–º–∞–Ω–Ω—ã—Ö —Ñ–∞–∫—Ç–æ–≤ –∏–ª–∏ —Ü–∏—Ñ—Ä ‚Äî —Ç–æ–ª—å–∫–æ –∏–∑ —Å–ø—Ä–∞–≤–∫–∏. "
    "–ï—Å–ª–∏ –∏—Å—Ö–æ–¥–Ω–∏–∫ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º ‚Äî –ø–µ—Ä–µ–≤–µ–¥–∏ –∞–∫–∫—É—Ä–∞—Ç–Ω–æ –Ω–∞ —Ä—É—Å—Å–∫–∏–π."
)

# ‚îÄ‚îÄ‚îÄ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞/–∫–∞—Ä—Ç–∏–Ω–æ–∫ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def generate_post_text(user_prompt, system_prompt=None):
    try:
        for _ in range(5):
            response = client.chat.completions.create(
                model="gpt-4o",
                messages=[
                    {"role": "system", "content": SYSTEM_PROMPT},
                    {"role": "user", "content": user_prompt}
                ]
            )
            content = response.choices[0].message.content.strip().replace("###", "")
            if len(content) <= 1015:
                return content
        logger.warning("‚ö†Ô∏è GPT –Ω–µ —Å–º–æ–≥ —É–ª–æ–∂–∏—Ç—å—Å—è –≤ –ª–∏–º–∏—Ç. –í–æ–∑–≤—Ä–∞—â–∞–µ–º None.")
        return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞: {e}")
        return None

def generate_image(title_line, style="news"):
    try:
        stripped_title = title_line.strip('üìäüìàüìâüí∞üè¶üí∏üß†üìåüìÖ').strip()

        # –≤–∞—Ä–∏–∞—Ç–∏–≤–Ω–æ—Å—Ç—å, —á—Ç–æ–±—ã –∫–∞—Ä—Ç–∏–Ω–∫–∏ –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–ª–∏—Å—å
        lenses  = ["85mm lens", "50mm prime", "35mm wide", "telephoto compression"]
        cameras = ["three-quarters view", "low-angle hero shot", "top-down minimal", "isometric semi-orthographic"]
        lights  = ["global illumination", "soft studio lighting", "volumetric light", "rim light, subtle bloom"]
        moods   = ["optimistic growth", "tense volatility", "calm stability", "cautious uncertainty", "analytical, high-tech"]
        envs    = [
            "sleek trading desk with glass surfaces",
            "abstract city skyline of a financial district",
            "clean studio with floating glass charts",
            "minimal architectural space with columns",
            "macro world of money props (paper, metal, glass) without text"
        ]
        devices = [
            "subtle wavy glass charts (volatility)",
            "gradually rising geometric bars (growth)",
            "balancing scales or counterweights (risk)",
            "interlocking blocks (diversification)",
            "flowing liquid glass shapes (liquidity)",
            "soft bokeh particles and thin market grid lines"
        ]

        # –æ–±—â–∞—è —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞ ‚Äî —Å—é–∂–µ—Ç–Ω–∞—è —Å—Ü–µ–Ω–∞ –ø–æ —Å–º—ã—Å–ª—É –∑–∞–≥–æ–ª–æ–≤–∫–∞
        base_prompt = f"""
            Create a premium, photorealistic 3D narrative scene (not a single centered emblem) that visually conveys
            the meaning of the headline: ‚Äú{stripped_title}‚Äù. Use believable PBR materials, ray-traced reflections,
            depth of field and cinematic contrast. Environment: {random.choice(envs)}.
            Camera: {random.choice(cameras)} with {random.choice(lenses)}.
            Lighting: {random.choice(lights)}. Mood: {random.choice(moods)}.
            Include 2‚Äì3 subtle visual metaphors appropriate to the headline, such as {', '.join(random.sample(devices, 3))}.
            No people. Square 1:1. Clean composition, premium finance aesthetics.
            Strictly no text, numbers or logos.
        """

        if style == "rubric":
            # —Ä—É–±—Ä–∏—á–Ω—ã–µ ‚Äî –Ω–µ–º–Ω–æ–≥–æ —Å–≤–µ—Ç–ª–µ–µ –∏ —Å –∞–∫–∫—É—Ä–∞—Ç–Ω—ã–º –¥–∏–∑–∞–π–Ω-–∞–∫—Ü–µ–Ω—Ç–æ–º
            style_hint = (
                "Slightly brighter neutral background, gentle studio feel. "
                "Optionally a very subtle design accent (faint dotted grid or thin soft border), not distracting."
            )
        else:
            # –Ω–æ–≤–æ—Å—Ç–∏ ‚Äî —Ç–µ–º–Ω–µ–µ, –¥–∏–Ω–∞–º–∏—á–Ω–µ–µ
            style_hint = (
                "Darker premium background and a more dynamic overall composition. "
                "Keep it tasteful and realistic."
            )

        prompt = base_prompt + "\n" + style_hint + "\n" + NEGATIVE_SUFFIX

        response = client.images.generate(
            model="dall-e-3",
            prompt=prompt,
            size="1024x1024",
            quality="hd",
            n=1
        )
        return response.data[0].url

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return None

def publish_post(content, image_url):
    """–°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ URL, –ø—Ä–∏ –Ω–µ—É–¥–∞—á–µ ‚Äî —Å–∫–∞—á–∏–≤–∞–µ–º –∏ —à–ª—ë–º –∫–∞–∫ —Ñ–∞–π–ª.
       –¢–µ–∫—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ HTML. –ï—Å–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç Telegram ‚Äî –ü–ï–†–ï–ì–ï–ù–ï–†–ò–†–£–ï–ú, –∞ –Ω–µ –æ–±—Ä–µ–∑–∞–µ–º."""
    try:
        plain = (content or "").strip()

        # 1) –ø–µ—Ä–≤–∏—á–Ω–∞—è —Å–±–æ—Ä–∫–∞ HTML
        caption_html = _polish_and_to_html(plain)

        # 2) –µ—Å–ª–∏ –≤—ã—Ö–æ–¥–∏–º –∑–∞ –ª–∏–º–∏—Ç ‚Äî –ø—Ä–æ—Å–∏–º –º–æ–¥–µ–ª—å –Ω–∞–ø–∏—Å–∞—Ç—å –∫–æ–º–ø–∞–∫—Ç–Ω–µ–µ –∏ –ø–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ–º
        if len(caption_html) > CAPTION_LIMIT:
            compact_plain = _regenerate_to_fit(plain)
            caption_html = _polish_and_to_html(compact_plain)
            # –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç—Ä–∞—Ö–æ–≤–∫–∞: –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –≤—Å—ë –µ—â—ë –¥–ª–∏–Ω–Ω–æ ‚Äî –µ—â—ë –æ–¥–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞
            if len(caption_html) > CAPTION_LIMIT:
                compact_plain = _regenerate_to_fit(compact_plain, target_limits=(880, 840, 800))
                caption_html = _polish_and_to_html(compact_plain)

        # –ü–æ–ø—ã—Ç–∫–∞ 1: URL
        try:
            bot.send_photo(
                chat_id=CHANNEL_ID,
                photo=image_url,
                caption=caption_html,
                parse_mode=telegram.ParseMode.HTML
            )
            logger.info("‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –ø–æ URL")
            return
        except BadRequest as e:
            msg = str(e)
            if ("Failed to get http url content" in msg
                or "wrong type of the web page content" in msg
                or "URL host is empty" in msg):
                logger.warning("‚ö†Ô∏è TG –Ω–µ —Å–º–æ–≥ —Å–∫–∞—á–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ URL, —à–ª—ë–º –∫–∞–∫ —Ñ–∞–π–ª‚Ä¶")
            else:
                raise

        # –ü–æ–ø—ã—Ç–∫–∞ 2: —Ñ–∞–π–ª
        with httpx.Client(timeout=30.0, follow_redirects=True) as c:
            resp = c.get(image_url, headers={"User-Agent": "Mozilla/5.0"})
            resp.raise_for_status()
            image_bytes = resp.content

        file_obj = telegram.InputFile(BytesIO(image_bytes), filename="cover.png")
        bot.send_photo(
            chat_id=CHANNEL_ID,
            photo=file_obj,
            caption=caption_html,
            parse_mode=telegram.ParseMode.HTML
        )
        logger.info("‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω (–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–∞–∫ —Ñ–∞–π–ª)")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")

# ‚îÄ‚îÄ‚îÄ –†–æ—Ç–∞—Ü–∏—è –ø–æ—Å—Ç–æ–≤ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
rubric_index = 0
news_index = 0

def _pick_title_line(text: str) -> str:
    """–ë–µ—Ä—ë–º —Å—Ç—Ä–æ–∫—É-–∑–∞–≥–æ–ª–æ–≤–æ–∫ (—É—á–∏—Ç—ã–≤–∞–µ–º üìÖ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏)."""
    return next(
        (line for line in (text or "").split('\n')
         if line.strip().startswith(('üìä','üìà','üìâ','üí∞','üè¶','üí∏','üß†','üìå','üìÖ'))),
        (text or "").split('\n')[0]
    )

def scheduled_rubric_post():
    # üîÅ —Ç–µ–ø–µ—Ä—å –∏–Ω–¥–µ–∫—Å—ã —É—Å—Ç–æ–π—á–∏–≤—ã –∫ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É
    idx = _next_index("rubric", len(rubrics))
    rubric = rubrics[idx]
    logger.info(f"‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä—É–±—Ä–∏—á–Ω–æ–≥–æ –ø–æ—Å—Ç–∞: {rubric}")

    attempts = 0
    text = None
    while attempts < 5:
        text = generate_post_text(
            f"–°–æ–∑–¥–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π Telegram-–ø–æ—Å—Ç –ø–æ —Ä—É–±—Ä–∏–∫–µ: {rubric}. {CONCRETE_HINT_RUBRIC}",
            system_prompt=SYSTEM_PROMPT
        )
        if text and len(text) <= 1015:
            break
        attempts += 1
    else:
        logger.warning("‚ö†Ô∏è GPT –Ω–µ —Å–º–æ–≥ —É–ª–æ–∂–∏—Ç—å—Å—è –≤ –ª–∏–º–∏—Ç. –í–æ–∑–≤—Ä–∞—â–∞–µ–º None.")
        return

    title_line = _pick_title_line(text)
    image_url = generate_image(title_line, style="news")  # –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π —Å—Ç–∏–ª—å
    if image_url:
        publish_post(text, image_url)

# ‚îÄ‚îÄ NEW: ¬´–í —ç—Ç–æ—Ç –¥–µ–Ω—å –≤ —Ñ–∏–Ω–∞–Ω—Å–∞—Ö¬ª ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
_FIN_KW_RU = [
    "–±–∞–Ω–∫", "–±–∞–Ω–∫–æ–≤", "–±–∏—Ä–∂", "–∞–∫—Ü–∏", "–æ–±–ª–∏–≥–∞—Ü", "–≤–∞–ª—é—Ç", "–¥–æ–ª–ª–∞—Ä", "–µ–≤—Ä–æ", "—Ä—É–±–ª",
    "—Ñ–∏–Ω–∞–Ω—Å", "–Ω–∞–ª–æ–≥", "–±—é–¥–∂–µ—Ç", "–¥–µ—Ñ–æ–ª—Ç", "–∫—Ä–∏–∑–∏—Å", "–∏–Ω—Ñ–ª—è—Ü", "–∏–ø–æ—Ç–µ–∫", "–∑–æ–ª–æ—Ç–æ",
    "–∑–æ–ª–æ—Ç–æ–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç", "–±—Ä–µ—Ç—Ç–æ–Ω-–≤—É–¥—Å", "—Ü–µ–Ω—Ç—Ä–æ–±–∞–Ω–∫", "—Ñ—Ä—Å", "–µ—Ü–±", "–∫–∞–∑–Ω–∞—á–µ–π—Å—Ç–≤",
    "—Ä—ã–Ω–æ–∫", "—Ç–æ—Ä–≥–æ–≤", "—Å–∞–Ω–∫—Ü", "—ç–º–∏—Å—Å–∏", "–±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤"
]
_FIN_KW_EN = [
    "bank", "banking", "stock", "exchange", "bond", "currency", "dollar", "euro", "ruble",
    "finance", "tax", "budget", "default", "crisis", "inflation", "mortgage", "gold",
    "gold standard", "bretton woods", "central bank", "federal reserve", "ecb",
    "treasury", "market", "trade", "sanction", "emission", "bankruptcy", "panic",
    "great depression", "oil crisis", "dot-com", "credit"
]

def _score_fin_event(txt: str) -> int:
    t = (txt or "").lower()
    score = 0
    for w in _FIN_KW_RU:
        if w in t: score += 2
    for w in _FIN_KW_EN:
        if w in t: score += 2
    # —Å–∏–ª—å–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã
    for w in ["–∫—Ä–∏–∑–∏—Å", "default", "panic", "–±—Ä–µ—Ç—Ç–æ–Ω", "bretton", "gold standard", "great depression", "bankruptcy"]:
        if w in t: score += 4
    return score

def fetch_finance_event_today():
    """–ë–µ—Ä—ë–º —Å–æ–±—ã—Ç–∏–µ —ç—Ç–æ–≥–æ –¥–Ω—è –∏–∑ Wikipedia (ru ‚Üí en fallback), —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ñ–∏–Ω–∞–Ω—Å–∞–º."""
    now = datetime.now(pytz.timezone("Europe/Moscow"))
    m, d = now.month, now.day
    urls = [
        f"https://ru.wikipedia.org/api/rest_v1/feed/onthisday/events/{m}/{d}",
        f"https://en.wikipedia.org/api/rest_v1/feed/onthisday/events/{m}/{d}",
    ]
    headers = {"User-Agent": "MinFinToolsBot/1.0 (+telegram)"}

    candidates = []
    for url in urls:
        try:
            r = httpx.get(url, headers=headers, timeout=15)
            r.raise_for_status()
            data = r.json()
            for ev in data.get("events", []):
                year = ev.get("year")
                text = ev.get("text", "")  # –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
                pages = ev.get("pages") or []
                title = pages[0].get("normalizedtitle") if pages else ""
                extract = pages[0].get("extract") if pages else ""
                link = ""
                try:
                    link = pages[0]["content_urls"]["desktop"]["page"]
                except Exception:
                    pass

                blob = " ".join([str(year or ""), title or "", text or "", extract or ""])
                score = _score_fin_event(blob)
                if score > 0:  # —Å—á–∏—Ç–∞–µ–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º
                    candidates.append({
                        "year": year,
                        "title": title or text[:120],
                        "summary": text or extract or "",
                        "link": link,
                        "lang": "ru" if "ru.wikipedia.org" in url else "en",
                        "score": score
                    })
        except Exception as ex:
            logger.warning("OnThisDay fetch fail %s: %s", url, ex)

    if not candidates:
        return None

    # –±–µ—Ä—ë–º —Å–∞–º—ã–π ¬´—Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π¬ª
    pick = sorted(candidates, key=lambda x: (x["score"], x["year"] or 0), reverse=True)[0]
    return pick

def scheduled_history_post():
    """–ü–æ—Å—Ç ¬´–í —ç—Ç–æ—Ç –¥–µ–Ω—å –≤ —Ñ–∏–Ω–∞–Ω—Å–∞—Ö¬ª ‚Äî 08:30 –µ–∂–µ–¥–Ω–µ–≤–Ω–æ."""
    evt = fetch_finance_event_today()
    if not evt:
        logger.info("‚è≠Ô∏è –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–µ —Å–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚Äî –ø—Ä–æ–ø—É—Å–∫.")
        return

    today = datetime.now(pytz.timezone("Europe/Moscow")).strftime("%-d %B %Y")
    facts = f"{evt.get('year','?')}: {evt.get('title','')} ‚Äî {evt.get('summary','')}"
    # —Å—Ç—Ä–∞—Ö—É–µ–º –¥–ª–∏–Ω—É —Ñ–∞–∫—Ç–æ–≤, —á—Ç–æ–±—ã –Ω–µ —Ä–∞–∑–¥—É–≤–∞—Ç—å prompt
    facts = facts.strip()
    if len(facts) > 600:
        facts = facts[:600].rstrip() + "‚Ä¶"
    src = evt.get("link") or ""

    user_prompt = (
        f"–°–¥–µ–ª–∞–π –ø–æ—Å—Ç –¥–ª—è —Ä—É–±—Ä–∏–∫–∏ ¬´–í —ç—Ç–æ—Ç –¥–µ–Ω—å –≤ —Ñ–∏–Ω–∞–Ω—Å–∞—Ö¬ª. –î–∞—Ç–∞: {today}. "
        f"–§–ê–ö–¢–´ (–±–µ–∑ –¥–æ–º—ã—Å–ª–æ–≤): {facts}. –ò—Å—Ç–æ—á–Ω–∏–∫: {src}. "
        f"{HISTORY_HINT}"
    )

    text = generate_post_text(user_prompt)
    if not text:
        return
    title_line = _pick_title_line(text)
    # –¥–ª—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–π —Ä—É–±—Ä–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —á—É—Ç—å ¬´—Å–≤–µ—Ç–ª–µ–µ¬ª –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ
    image_url = generate_image(title_line, style="rubric")
    if image_url:
        publish_post(text, image_url)

# ‚îÄ‚îÄ‚îÄ –ù–æ–≤–æ—Å—Ç–∏ (–∫–∞–∫ –±—ã–ª–æ) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def fetch_buzzy_rss_news(topic, per_feed=5, lookback_hours=48):
    feeds = rss_sources.get(topic, [])
    entries = []

    for url in feeds:
        try:
            feed = feedparser.parse(url, request_headers={"User-Agent": "Mozilla/5.0"})
            for e in feed.entries[:per_feed]:
                # published/updated fallback
                if getattr(e, "published_parsed", None):
                    published = datetime.fromtimestamp(mktime(e.published_parsed), tz=pytz.UTC)
                elif getattr(e, "updated_parsed", None):
                    published = datetime.fromtimestamp(mktime(e.updated_parsed), tz=pytz.UTC)
                else:
                    published = datetime.utcnow().replace(tzinfo=pytz.UTC)

                # summary/description/content fallback
                raw = e.get("summary") or e.get("description")
                if not raw and e.get("content"):
                    try:
                        raw = e.content[0].value
                    except Exception:
                        raw = ""
                summary = clean_html(raw).strip()

                title = e.get("title", "").strip()
                link = e.get("link", "")

                if title:
                    entries.append({
                        "title": title,
                        "summary": summary,
                        "link": link,
                        "published": published.isoformat()
                    })
        except Exception as ex:
            logger.warning(f"RSS parse error {url}: {ex}")

    if not entries:
        return "–ù–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ —Ç–µ–º–µ."

    cutoff = datetime.utcnow().replace(tzinfo=pytz.UTC) - timedelta(hours=lookback_hours)
    fresh = [x for x in entries if datetime.fromisoformat(x["published"]) >= cutoff]
    items = fresh or entries

    # –≤—ã–±–æ—Ä ¬´—Å–∞–º–æ–π –Ω–∞—à—É–º–µ–≤—à–µ–π¬ª —á–µ—Ä–µ–∑ LLM
    try:
        headlines = "\n".join([f"{i+1}. {x['title']}" for i, x in enumerate(items[:30])])
        prompt = (
            "–ù–∏–∂–µ —Å–ø–∏—Å–æ–∫ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –ø–æ –æ–¥–Ω–æ–π —Ç–µ–º–µ. –í—ã–±–µ—Ä–∏ –†–û–í–ù–û –û–î–ù–£ ¬´—Å–∞–º—É—é –Ω–∞—à—É–º–µ–≤—à—É—é¬ª "
            "—Å —É—á—ë—Ç–æ–º –ø–æ–≤—Ç–æ—Ä—è–µ–º–æ—Å—Ç–∏ —Å—é–∂–µ—Ç–∞ –≤ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö, —Å–≤–µ–∂–µ—Å—Ç–∏ (–≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24‚Äì48—á), "
            "–∑–Ω–∞—á–∏–º–æ—Å—Ç–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –∏ –º–∞—Å—à—Ç–∞–±–∞ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏–π. "
            "–û—Ç–≤–µ—Ç –≤–µ—Ä–Ω–∏ –≤ JSON —Å –ø–æ–ª—è–º–∏: best_index (int, –Ω–∞—á–∏–Ω–∞—è —Å 1) –∏ reason (1 –∫–æ—Ä–æ—Ç–∫–∞—è —Ñ—Ä–∞–∑–∞). "
            f"\n\n–°–ø–∏—Å–æ–∫ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤:\n{headlines}"
        )
        # ‚úî —Ñ–∏–∫—Å: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –º–µ—Ç–æ–¥, —á—Ç–æ –∏ –≤ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö
        resp = client.chat.completions.create(
            model="gpt-4o",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.2
        )
        data = json.loads(resp.choices[0].message.content)
        idx = int(data.get("best_index", 1)) - 1
        pick = items[max(0, min(idx, len(items)-1))]
    except Exception as ex:
        logger.warning(f"LLM ranking failed, fallback to latest: {ex}")
        pick = sorted(items, key=lambda x: x["published"], reverse=True)[0]

    # –∞–Ω—Ç–∏-–ø–æ–≤—Ç–æ—Ä—ã: –µ—Å–ª–∏ —É–∂–µ –±—ã–ª–æ, –±–µ—Ä–µ–º –±–ª–∏–∂–∞–π—à—É—é —Å–≤–µ–∂—É—é –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—É
    sid = _story_id(pick["title"], pick.get("link", ""))
    if _is_seen(sid):
        for x in sorted(items, key=lambda y: y["published"], reverse=True):
            alt_sid = _story_id(x["title"], x.get("link", ""))
            if not _is_seen(alt_sid):
                pick, sid = x, alt_sid
                break
    _mark_seen(sid)

    summary = pick["summary"] or ""
    if len(summary) > 300:
        summary = summary[:300] + "..."
    logger.info("üì∞ –ò—Å—Ç–æ—á–Ω–∏–∫: %s | %s", pick.get("title",""), pick.get("link",""))
    return f"{pick['title']}: {summary}"

def scheduled_news_post():
    # üîÅ —Ç–µ–ø–µ—Ä—å –∏–Ω–¥–µ–∫—Å—ã —É—Å—Ç–æ–π—á–∏–≤—ã –∫ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É
    idx = _next_index("news", len(news_themes))
    topic = news_themes[idx]
    today = datetime.now(pytz.timezone("Europe/Moscow")).strftime("%-d %B %Y")
    logger.info(f"‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ—Å—Ç–Ω–æ–≥–æ –ø–æ—Å—Ç–∞: {topic}")

    rss_news = fetch_buzzy_rss_news(topic)
    if not rss_news or rss_news.startswith("–ù–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π"):
        logger.info("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫: –Ω–µ—Ç —Å–≤–µ–∂–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ —Ç–µ–º–µ %s", topic)
        return
    if len(rss_news) > 500:
        rss_news = rss_news[:500] + "..."

    user_prompt = (
        f"–°–æ—Å—Ç–∞–≤—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π Telegram-–ø–æ—Å—Ç –ø–æ —Ç–µ–º–µ: {topic}. "
        f"–î–∞—Ç–∞: {today}. –§–ê–ö–¢–´ (–Ω–µ –¥–æ–±–∞–≤–ª—è–π –Ω–∏—á–µ–≥–æ —Å–≤–µ—Ä—Ö): {rss_news}. "
        f"–°–¥–µ–ª–∞–π –ø–æ—Å—Ç –∂–∏–≤—ã–º, —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–º, –Ω–µ –±–æ–ª–µ–µ 990 —Å–∏–º–≤–æ–ª–æ–≤. –í –∫–æ–Ω—Ü–µ –¥–æ–±–∞–≤—å –≤–æ–ø—Ä–æ—Å –ø–æ–¥–ø–∏—Å—á–∏–∫—É. "
        f"{CONCRETE_HINT_NEWS}"
    )

    text = generate_post_text(user_prompt)
    if text:
        title_line = _pick_title_line(text)
        image_url = generate_image(title_line, style="news")
        if image_url:
            publish_post(text, image_url)

# ‚îÄ‚îÄ‚îÄ –†—É—á–Ω—ã–µ —Ç–µ—Å—Ç—ã (–∫–∞–∫ –±—ã–ª–∏) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def test_rubric_post(rubric_name):
    logger.info(f"‚è≥ –†—É—á–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä—É–±—Ä–∏—á–Ω–æ–≥–æ –ø–æ—Å—Ç–∞: {rubric_name}")
    attempts, text = 0, None
    while attempts < 5:
        text = generate_post_text(
            f"–°–æ–∑–¥–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π Telegram-–ø–æ—Å—Ç –ø–æ —Ä—É–±—Ä–∏–∫–µ: {rubric_name}.",
            system_prompt=SYSTEM_PROMPT
        )
        if text and len(text) <= 1015:
            break
        attempts += 1
    else:
        logger.warning("‚ö†Ô∏è GPT –Ω–µ —Å–º–æ–≥ —É–ª–æ–∂–∏—Ç—å—Å—è –≤ –ª–∏–º–∏—Ç. –í–æ–∑–≤—Ä–∞—â–∞–µ–º None.")
        return
    title_line = _pick_title_line(text)
    image_url = generate_image(title_line, style="news")
    if image_url:
        publish_post(text, image_url)

def test_news_post(rubric_name):
    logger.info(f"‚è≥ –†—É—á–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ—Å—Ç–Ω–æ–≥–æ –ø–æ—Å—Ç–∞: {rubric_name}")
    today = datetime.now(pytz.timezone("Europe/Moscow")).strftime("%-d %B %Y")
    rss_news = fetch_buzzy_rss_news(rubric_name)
    if len(rss_news) > 500:
        rss_news = rss_news[:500] + "..."
    user_prompt = (
        f"–°–æ—Å—Ç–∞–≤—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π Telegram-–ø–æ—Å—Ç –ø–æ —Ç–µ–º–µ: {rubric_name}. "
        f"–î–∞—Ç–∞: {today}. –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏: {rss_news}. "
        f"–°–¥–µ–ª–∞–π –ø–æ—Å—Ç –∂–∏–≤—ã–º, —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–º, –Ω–µ –±–æ–ª–µ–µ 990 —Å–∏–º–≤–æ–ª–æ–≤. –í—Å—Ç–∞–≤—å –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫-–∑–∞—Ü–µ–ø. –í –∫–æ–Ω—Ü–µ ‚Äî –≤–æ–ø—Ä–æ—Å –ø–æ–¥–ø–∏—Å—á–∏–∫—É. "
        f"{CONCRETE_HINT_NEWS}"
    )
    text = generate_post_text(user_prompt)
    if text:
        title_line = _pick_title_line(text)
        image_url = generate_image(title_line, style="news")
        if image_url:
            publish_post(text, image_url)

# ‚îÄ‚îÄ‚îÄ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ (–ú–°–ö) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# –Ω–æ–≤—ã–π –ø–æ—Å—Ç –∏—Å—Ç–æ—Ä–∏–∏ ‚Äî –°–ê–ú–´–ô –ü–ï–†–í–´–ô
scheduler.add_job(scheduled_history_post, 'cron', hour=8,  minute=30)

scheduler.add_job(scheduled_news_post,   'cron', hour=9,  minute=26)
scheduler.add_job(scheduled_rubric_post, 'cron', hour=11, minute=42)
scheduler.add_job(scheduled_news_post,   'cron', hour=13, minute=24)
scheduler.add_job(scheduled_rubric_post, 'cron', hour=16, minute=5)
scheduler.add_job(scheduled_news_post,   'cron', hour=18, minute=47)
scheduler.add_job(scheduled_rubric_post, 'cron', hour=19, minute=47)

# ‚îÄ‚îÄ‚îÄ –ó–∞–ø—É—Å–∫ –ø–æ–¥ Railway ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
if __name__ == "__main__":
    import threading

    def run_scheduler():
        scheduler.start()
        logger.info("üóìÔ∏è APScheduler –∑–∞–ø—É—â–µ–Ω")

    threading.Thread(target=run_scheduler, daemon=True).start()

    port = int(os.getenv("PORT", "8080"))
    logger.info(f"üåê Flask —Å–ª—É—à–∞–µ—Ç –ø–æ—Ä—Ç {port}")
    app.run(host="0.0.0.0", port=port)
