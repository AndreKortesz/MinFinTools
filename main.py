import os
import json
import logging
from openai import OpenAI
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
from datetime import datetime
import pytz
import feedparser
import re
from dotenv import load_dotenv
import asyncio

# –ó–∞–≥—Ä—É–∑–∫–∞ env
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
CHANNEL_ID = os.getenv("CHANNEL_ID")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
client = OpenAI(api_key=OPENAI_API_KEY)

# –°–ø–∏—Å–æ–∫ —Ä—É–±—Ä–∏–∫ –∏ –Ω–æ–≤–æ—Å—Ç–Ω—ã—Ö —Ç–µ–º
rubrics = [
    "–§–∏–Ω—Å–æ–≤–µ—Ç –¥–Ω—è", "–§–∏–Ω–ª–∏–∫–±–µ–∑", "–õ–∏—á–Ω—ã–π —Ñ–∏–Ω–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç", "–î–µ–Ω—å–≥–∏ –≤ —Ü–∏—Ñ—Ä–∞—Ö",
    "–ö–µ–π—Å / –†–∞–∑–±–æ—Ä", "–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è –¥–µ–Ω–µ–≥", "–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –æ—à–∏–±–∫–∞", "–ü—Ä–æ–¥—É–∫—Ç –Ω–µ–¥–µ–ª–∏",
    "–ò–Ω–≤–µ—Å—Ç-–≥–æ—Ä–∏–∑–æ–Ω—Ç", "–ú–∏—Ñ –Ω–µ–¥–µ–ª–∏", "–ü—É—Ç—å –∫ 1 –º–ª–Ω", "–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –ø—Ä–∏–≤—ã—á–∫–∞",
    "–í–æ–ø—Ä–æ—Å ‚Äî –æ—Ç–≤–µ—Ç", "Excel / –¢–∞–±–ª–∏—Ü–∞", "–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Ü–∏—Ç–∞—Ç–∞", "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –Ω–µ–¥–µ–ª–∏"
]
news_themes = [
    "–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –†–æ—Å—Å–∏–∏", "–ù–æ–≤–æ—Å—Ç–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç",
    "–ù–æ–≤–æ—Å—Ç–∏ —Ñ–æ–Ω–¥–æ–≤—ã—Ö —Ä—ã–Ω–∫–æ–≤ (–†–æ—Å—Å–∏—è –∏ –°–®–ê)"
]
rss_sources = {
    "–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –†–æ—Å—Å–∏–∏": [
        "https://rssexport.rbc.ru/rbcnews/news/20/full.rss",
        "https://tass.ru/rss/v2.xml?rubric=ekonomika",
        "https://www.interfax.ru/rss.asp"
    ],
    "–ù–æ–≤–æ—Å—Ç–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç": [
        "https://forklog.com/feed/",
        "https://bitnovosti.com/feed/"
    ],
    "–ù–æ–≤–æ—Å—Ç–∏ —Ñ–æ–Ω–¥–æ–≤—ã—Ö —Ä—ã–Ω–∫–æ–≤ (–†–æ—Å—Å–∏—è –∏ –°–®–ê)": [
        "https://rssexport.rbc.ru/rbcnews/news/21/full.rss",
        "https://www.finam.ru/rss/news.rss"
    ]
}

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ/–∑–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–æ—Ç–∞—Ü–∏–∏
STATE_FILE = "state.json"

def load_state():
    if os.path.exists(STATE_FILE):
        with open(STATE_FILE, 'r') as f:
            return json.load(f)
    return {"rubric_index": 0, "news_index": 0}

def save_state(rubric_index, news_index):
    with open(STATE_FILE, 'w') as f:
        json.dump({"rubric_index": rubric_index, "news_index": news_index}, f)

# –û—á–∏—Å—Ç–∫–∞ HTML
def clean_html(raw_html):
    cleanr = re.compile('<.*?>')
    return re.sub(cleanr, '', raw_html)

# –ü—Ä–æ–º–ø—Ç –¥–ª—è GPT
SYSTEM_PROMPT = (
    "–¢—ã ‚Äî —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä Telegram-–∫–∞–Ω–∞–ª–∞. –ü–∏—à–∏ –∂–∏–≤–æ, —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–æ –∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ. "
    "–ü–æ—Å—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–ª–∂–µ–Ω –≤–∫–ª—é—á–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –±–ª–æ–∫–∏: "
    "1) –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å —ç–º–æ–¥–∑–∏, "
    "2) –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫-–∑–∞—Ü–µ–ø —Å —ç–º–æ–¥–∑–∏ ‚Äî –∏–Ω—Ç—Ä–∏–≥—É—é—â–∏–π –∫—Ä—é—á–æ–∫ (–≤–æ–ø—Ä–æ—Å –∏–ª–∏ —Ñ—Ä–∞–∑–∞, –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤), "
    "3) –∫—Ä–∞—Ç–∫–æ–µ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ, "
    "4) –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å —ç–º–æ–¥–∑–∏ –∏ –∂–∏—Ä–Ω—ã–º —à—Ä–∏—Ñ—Ç–æ–º, "
    "5) –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –ø—Ä–æ–≥–Ω–æ–∑, "
    "6) –∏—Ç–æ–≥–æ–≤—ã–π –≤—ã–≤–æ–¥. "
    "–í –∫–æ–Ω—Ü–µ ‚Äî –Ω–µ–Ω–∞–≤—è–∑—á–∏–≤—ã–π, –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å –∫ –ø–æ–¥–ø–∏—Å—á–∏–∫—É. "
    "–ü—Ä–∏–º–µ—Ä—ã –∑–∞—Ü–µ–ø–æ–≤:\n"
    "‚Äî ü§î –°–ª—É—á–∞–π–Ω–æ—Å—Ç—å –∏–ª–∏ —Å–∏–≥–Ω–∞–ª?\n"
    "‚Äî üìâ –í—Ä–µ–º–µ–Ω–Ω–æ–µ –ø–∞–¥–µ–Ω–∏–µ –∏–ª–∏ –Ω–∞—á–∞–ª–æ —Ç—Ä–µ–Ω–¥–∞?\n"
    "‚Äî ü§ù –î—Ä—É–∂–±–∞ –∏–ª–∏ –∏–ª–ª—é–∑–∏—è?\n"
    "‚Äî üí∏ –î–µ–Ω—å–≥–∏ –µ—Å—Ç—å ‚Äî —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –Ω–µ—Ç?\n"
    "‚Äî üìà –í—Å—ë –ª–∏ —Ç–∞–∫ –≥–ª–∞–¥–∫–æ?\n"
    "‚Äî üìä –ù–æ–≤—ã–π —Ç—Ä–µ–Ω–¥ –∏–ª–∏ –≤—Å–ø–ª–µ—Å–∫?\n"
    "–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Ä–µ—à—ë—Ç–∫–∏ #. –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ –∂–∏—Ä–Ω—ã–π —à—Ä–∏—Ñ—Ç –¥–ª—è –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–æ–≤. "
    "–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –≤ —Ç–µ–ª–µ —Ç–µ–∫—Å—Ç–∞, —Ç–æ–ª—å–∫–æ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö. "
    "–°–¢–†–û–ì–û: –û—Ç–≤–µ—Ç –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 990 —Å–∏–º–≤–æ–ª–æ–≤. –ü–µ—Ä–µ–¥ —Ñ–∏–Ω–∞–ª—å–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º –ø–æ–¥—Å—á–∏—Ç–∞–π –¥–ª–∏–Ω—É –∏ —É–±–µ–¥–∏—Å—å, —á—Ç–æ –æ–Ω–∞ <=990. –ï—Å–ª–∏ –±–æ–ª—å—à–µ ‚Äî —Å–æ–∫—Ä–∞—Ç–∏. "
    "–ü—Ä–∏–º–µ—Ä –ø–æ—Å—Ç–∞ (–¥–ª–∏–Ω–∞ 750 —Å–∏–º–≤–æ–ª–æ–≤):\n"
    "üí∞ –§–∏–Ω—Å–æ–≤–µ—Ç –¥–Ω—è\n"
    "ü§î –ì–æ—Ç–æ–≤—ã –∫ —Ä–æ—Å—Ç—É?\n"
    "–í –º–∏—Ä–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ ‚Äî –∫–ª—é—á –∫ —É—Å–ø–µ—Ö—É.\n"
    "**üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞:** –†—ã–Ω–æ–∫ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å, –Ω–æ –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Å–Ω–∏–∂–∞–µ—Ç —Ä–∏—Å–∫–∏.\n"
    "**üìà –ü—Ä–æ–≥–Ω–æ–∑:** –í –±–ª–∏–∂–∞–π—à–∏–π –º–µ—Å—è—Ü –æ–∂–∏–¥–∞–µ—Ç—Å—è –ø–æ–¥—ä—ë–º –Ω–∞ 5-7%.\n"
    "–í—ã–≤–æ–¥: –ù–∞—á–Ω–∏—Ç–µ —Å –º–∞–ª–æ–≥–æ, –Ω–æ —Ä–µ–≥—É–ª—è—Ä–Ω–æ.\n"
    "–ê –≤—ã –ø—Ä–æ–±–æ–≤–∞–ª–∏ –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—å?\n"
    "‚Äî –ü–æ–¥—Å—á—ë—Ç: 750 —Å–∏–º–≤–æ–ª–æ–≤."
)

async def generate_post_text(user_prompt):
    try:
        for _ in range(5):
            response = client.chat.completions.create(
                model="gpt-4o",
                messages=[
                    {"role": "system", "content": SYSTEM_PROMPT},
                    {"role": "user", "content": user_prompt}
                ],
                max_tokens=300,
                temperature=0.7
            )
            content = response.choices[0].message.content.strip().replace("###", "")
            if len(content) <= 1015:
                return content
        logger.warning("‚ö†Ô∏è GPT –Ω–µ —Å–º–æ–≥ —É–ª–æ–∂–∏—Ç—å—Å—è –≤ –ª–∏–º–∏—Ç.")
        return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞: {e}")
        return None

async def generate_image(title_line, style="news"):
    try:
        stripped_title = title_line.strip('üìäüìàüìâüí∞üè¶üí∏üß†üìå').strip()
        if style == "rubric":
            prompt = (
                f"–ú–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è –≤ –¥–µ–ª–æ–≤–æ–º —Å—Ç–∏–ª–µ –Ω–∞ —Ç–µ–º—É: ¬´{stripped_title}¬ª. "
                "–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞. –¢–æ–ª—å–∫–æ –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã: –∏–∫–æ–Ω–∫–∏, —Å—Ö–µ–º—ã, –≥—Ä–∞—Ñ–∏–∫–∏, —Å—Ç—Ä–µ–ª–∫–∏ —Ä–æ—Å—Ç–∞, –¥–µ–Ω—å–≥–∏, –º–æ–Ω–µ—Ç—ã, –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã. "
                "–¶–≤–µ—Ç–æ–≤–∞—è –ø–∞–ª–∏—Ç—Ä–∞ ‚Äî —Ç—ë–º–Ω–æ-–∑–µ–ª—ë–Ω—ã–π, —Å–≤–µ—Ç–ª–æ-–∑–µ–ª—ë–Ω—ã–π –∏ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ —Å–≤–µ—Ç–ª—ã–µ –æ—Ç—Ç–µ–Ω–∫–∏. "
                "–°—Ç–∏–ª—å ‚Äî —á–∏—Å—Ç—ã–π, —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π, –∫–∞–∫ –≤ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–º Telegram-–∫–∞–Ω–∞–ª–µ."
            )
        else:
            prompt = (
                f"–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è –≤ —Å—Ç–∏–ª–µ –ø–æ—Å—Ç–µ—Ä–∞ –¥–ª—è –¥–µ–ª–æ–≤–æ–≥–æ Telegram-–∫–∞–Ω–∞–ª–∞. –¢–µ–º–∞: ¬´{stripped_title}¬ª. "
                "–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞. –í–∏–∑—É–∞–ª—å–Ω–∞—è –º–µ—Ç–∞—Ñ–æ—Ä–∞: —Ä–æ—Å—Ç, —Ä–∞–∫–µ—Ç–∞, —Å—Ç—Ä–µ–ª–∫–∞ –≤–≤–µ—Ä—Ö, —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å, –¥–µ–Ω—å–≥–∏, —ç–∫–æ–Ω–æ–º–∏–∫–∞, –±–∏—Ä–∂–∞. "
                "–¶–≤–µ—Ç–æ–≤–∞—è –≥–∞–º–º–∞ ‚Äî –º—è–≥–∫–∏–µ —Ç–µ–Ω–∏, –≥–ª—É–±–æ–∫–∏–π —Ñ–æ–Ω, –∑–µ–ª—ë–Ω—ã–µ –∏ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ –æ—Ç—Ç–µ–Ω–∫–∏. "
                "–°—Ç–∏–ª—å ‚Äî –∏–ª–ª—é—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π, —á–∏—Å—Ç—ã–π, –∫–∞–∫ –æ–±–ª–æ–∂–∫–∞ –∫ –Ω–æ–≤–æ—Å—Ç–Ω–æ–π —Å—Ç–∞—Ç—å–µ."
            )
        response = client.images.generate(
            model="dall-e-3",
            prompt=prompt,
            size="1024x1024",
            quality="standard",
            n=1
        )
        return response.data[0].url
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return None

async def publish_post(content, image_url, application):
    try:
        if len(content) > 1024:
            content = content[:1020] + "..."
        await application.bot.send_photo(
            chat_id=CHANNEL_ID,
            photo=image_url,
            caption=content,
            parse_mode=telegram.constants.ParseMode.MARKDOWN_V2
        )
        logger.info("‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")

async def scheduled_rubric_post(context: ContextTypes.DEFAULT_TYPE):
    state = load_state()
    rubric_index = state["rubric_index"]
    rubric = rubrics[rubric_index]
    rubric_index = (rubric_index + 1) % len(rubrics)
    state["rubric_index"] = rubric_index
    save_state(rubric_index, state["news_index"])
    logger.info(f"‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä—É–±—Ä–∏—á–Ω–æ–≥–æ –ø–æ—Å—Ç–∞: {rubric}")

    text = await generate_post_text(f"–°–æ–∑–¥–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π Telegram-–ø–æ—Å—Ç –ø–æ —Ä—É–±—Ä–∏–∫–µ: {rubric}.")
    if text:
        title_line = next(
            (line for line in text.split('\n') if line.strip().startswith(('üìä', 'üìà', 'üìâ', 'üí∞', 'üè¶', 'üí∏', 'üß†', 'üìå'))),
            text.split('\n')[0]
        )
        image_url = await generate_image(title_line, style="rubric")
        if image_url:
            await publish_post(text, image_url, context.application)

async def fetch_top_rss_news(rubric_name):
    feeds = rss_sources.get(rubric_name, [])
    for url in feeds:
        try:
            feed = feedparser.parse(url)
            for entry in feed.entries:
                title = entry.title
                summary = clean_html(entry.get("summary", ""))
                if len(summary) > 50:
                    return f"{title}: {summary}"
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ RSS {url}: {e}")
    return "–ù–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ —Ç–µ–º–µ."

async def scheduled_news_post(context: ContextTypes.DEFAULT_TYPE):
    state = load_state()
    news_index = state["news_index"]
    topic = news_themes[news_index]
    news_index = (news_index + 1) % len(news_themes)
    state["news_index"] = news_index
    save_state(state["rubric_index"], news_index)
    today = datetime.now(pytz.timezone("Europe/Moscow")).strftime("%-d %B %Y")
    logger.info(f"‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ—Å—Ç–Ω–æ–≥–æ –ø–æ—Å—Ç–∞: {topic}")

    rss_news = await asyncio.to_thread(fetch_top_rss_news, topic)
    if len(rss_news) > 500:
        rss_news = rss_news[:500] + "..."
    user_prompt = (
        f"–°–æ—Å—Ç–∞–≤—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π Telegram-–ø–æ—Å—Ç –ø–æ —Ç–µ–º–µ: {topic}. "
        f"–î–∞—Ç–∞: {today}. –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏: {rss_news}. "
        f"–°–¥–µ–ª–∞–π –ø–æ—Å—Ç –∂–∏–≤—ã–º, —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–º, –Ω–µ –±–æ–ª–µ–µ 990 —Å–∏–º–≤–æ–ª–æ–≤. –í—Å—Ç–∞–≤—å –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫-–∑–∞—Ü–µ–ø. –í –∫–æ–Ω—Ü–µ ‚Äî –≤–æ–ø—Ä–æ—Å –ø–æ–¥–ø–∏—Å—á–∏–∫—É."
    )
    text = await generate_post_text(user_prompt)
    if text:
        title_line = next(
            (line for line in text.split('\n') if line.strip().startswith(('üìä', 'üìà', 'üìâ', 'üí∞', 'üè¶', 'üí∏', 'üß†', 'üìå'))),
            text.split('\n')[0]
        )
        image_url = await generate_image(title_line, style="news")
        if image_url:
            await publish_post(text, image_url, context.application)

def main():
    application = Application.builder().token(TELEGRAM_TOKEN).build()

    # –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ (–ú–°–ö)
    application.job_queue.run_daily(scheduled_news_post, time=datetime.time(hour=9, minute=16, tzinfo=pytz.timezone("Europe/Moscow")))
    application.job_queue.run_daily(scheduled_rubric_post, time=datetime.time(hour=11, minute=42, tzinfo=pytz.timezone("Europe/Moscow")))
    application.job_queue.run_daily(scheduled_news_post, time=datetime.time(hour=13, minute=24, tzinfo=pytz.timezone("Europe/Moscow")))
    application.job_queue.run_daily(scheduled_rubric_post, time=datetime.time(hour=16, minute=5, tzinfo=pytz.timezone("Europe/Moscow")))
    application.job_queue.run_daily(scheduled_news_post, time=datetime.time(hour=18, minute=47, tzinfo=pytz.timezone("Europe/Moscow")))
    application.job_queue.run_daily(scheduled_rubric_post, time=datetime.time(hour=20, minute=30, tzinfo=pytz.timezone("Europe/Moscow")))

    # –ó–∞–ø—É—Å–∫
    asyncio.run(scheduled_rubric_post(None))  # None –∫–∞–∫ placeholder –¥–ª—è context
    application.run_polling()

if __name__ == "__main__":
    main()
